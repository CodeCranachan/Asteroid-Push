<project name="Asteroid Push" default="deployment" basedir="." xmlns:jacoco="antlib:org.jacoco.ant">
   <description>
      Compiles the code, tests the functionality and builds the distribution package of Asteroid Push
   </description>

   <!-- LIBRARY
        Fetches libraries and other dependencies required by the final distribution and the build process itself
     -->
   <property name="lib.lwjgl.url" value="http://sourceforge.net/projects/java-game-lib/files/Official Releases/LWJGL 2.8.3/lwjgl-2.8.3.zip"/>
   <property name="lib.lwjgl.archive" value="lwjgl-2.8.3.zip"/>
   <property name="lib.slick.url" value="http://slick.cokeandcode.com/downloads/slick.zip"/>
   <property name="lib.slick.archive" value="slick.zip"/>
   <property name="lib.jbox2d.url" value="http://jbox2d.googlecode.com/files/jbox2d-2.1.2.2.zip"/>
   <property name="lib.jbox2d.archive" value="jbox2d-2.1.2.2.zip"/>
   <property name="lib.junit.url" value="http://cloud.github.com/downloads/KentBeck/junit/junit-4.10.jar"/>
   <property name="lib.junit.archive" value="junit-4.10.jar"/>
   <property name="lib.jmock.url" value="http://www.jmock.org/dist/jmock-2.5.1-jars.zip"/>
   <property name="lib.jmock.archive" value="jmock-2.5.1-jars.zip"/>
   <property name="lib.onejar-ant.url" value="http://downloads.sourceforge.net/project/one-jar/one-jar/one-jar-0.97/one-jar-ant-task-0.97.jar"/>
   <property name="lib.onejar-ant.archive" value="one-jar-ant-task-0.97.jar"/>
   <property name="lib.jacoco.url" value="http://sourceforge.net/projects/eclemma/files/07_JaCoCo/0.5.8/jacoco-0.5.8.201207111220.zip"/>
   <property name="lib.jacoco.archive" value="jacoco-0.5.8.201207111220.zip"/>
   <property name="lib.lint4j.url" value="http://www.jutils.com/download/lint4j/lint4j-0.9.1.zip"/>
   <property name="lib.lint4j.archive" value="lint4j-0.9.1.zip"/>
   <property name="lib.slf4j.url" value="http://www.slf4j.org/dist/slf4j-1.6.6.zip"/>
   <property name="lib.slf4j.archive" value="slf4j-1.6.6.zip"/>
   <property name="library.root" location="build/library"/>
   <property name="library.downloads" location="${library.root}/download"/>
   <property name="library.jars" location="${library.root}/jar"/>
   <property name="library.natives" location="${library.root}/native"/>

   <target name="library">
      <!-- Download library packages -->
      <mkdir dir="${library.downloads}"/>
      <get dest="${library.downloads}" verbose="on" skipexisting="true">
         <url url="${lib.lwjgl.url}"/>
         <url url="${lib.slick.url}"/>
         <url url="${lib.jbox2d.url}"/>
         <url url="${lib.junit.url}"/>
         <url url="${lib.jmock.url}"/>
         <url url="${lib.jacoco.url}"/>
         <url url="${lib.onejar-ant.url}"/>
         <url url="${lib.lint4j.url}"/>
         <url url="${lib.slf4j.url}"/>
      </get>
      
      <mkdir dir="${library.jars}"/>
      <mkdir dir="${library.natives}"/>
      <!-- Slick -->
      <unzip src="${library.downloads}/${lib.slick.archive}" dest="${library.jars}">
         <patternset>
            <include name="lib/slick.jar"/>
         </patternset>
         <mapper type="flatten"/>
      </unzip>
      <!-- Lwjgl -->
      <unzip src="${library.downloads}/${lib.lwjgl.archive}" dest="${library.jars}">
         <patternset>
            <include name="**/jar/lwjgl.jar"/>
            <include name="**/jar/jinput.jar"/>
         </patternset>
         <mapper type="flatten"/>
      </unzip>
      <unzip src="${library.downloads}/${lib.lwjgl.archive}" dest="${library.natives}">
         <patternset>
            <include name="**/native/**"/>
         </patternset>
         <mapper type="regexp" from="^*./native/(.*)$$" to="\1"/>
      </unzip>
      <!-- JBox2d -->
      <unzip src="${library.downloads}/${lib.jbox2d.archive}" dest="${library.jars}">
         <patternset>
            <include name="**/jbox2d-library-?.?.?.?.jar"/>
         </patternset>
         <mapper type="flatten"/>
      </unzip>
      <!-- JUnit -->
      <copy file="${library.downloads}/${lib.junit.archive}" todir="${library.jars}"/>
      <!-- JMock -->
      <unzip src="${library.downloads}/${lib.jmock.archive}" dest="${library.jars}">
         <patternset>
            <include name="**/*.jar"/>
         </patternset>
         <mapper type="flatten"/>
      </unzip>
      <!-- OneJar -->
      <copy file="${library.downloads}/${lib.onejar-ant.archive}" todir="${library.jars}"/>
      <!-- Jacoco -->
      <unzip src="${library.downloads}/${lib.jacoco.archive}" dest="${library.jars}">
         <patternset>
            <include name="**/*.jar"/>
         </patternset>
         <mapper type="flatten"/>
      </unzip>
      <!-- Lint4j -->
      <unzip src="${library.downloads}/${lib.lint4j.archive}" dest="${library.jars}">
         <patternset>
            <include name="**/*.jar"/>
         </patternset>
         <mapper type="flatten"/>
      </unzip>
      <!-- SLF4J -->
      <unzip src="${library.downloads}/${lib.slf4j.archive}" dest="${library.jars}">
         <patternset>
            <include name="**/slf4j-api-1.6.6.jar"/>
            <include name="**/slf4j-jdk14-1.6.6.jar"/>
         </patternset>
         <mapper type="flatten"/>
      </unzip>
      
   </target>

   <!-- RELEASE 
        Compiles the source code for distribution 
     -->
   <property name="source.root" location="src"/>
   <property name="release.root" location="build/release"/>
   <property name="release.classes" location="${release.root}/classes"/>
   <path id="release.include">
      <fileset dir="${library.jars}">
         <include name="lwjgl.jar"/>
         <include name="slick.jar"/>
         <include name="jbox2d-library-?.?.?.?.jar"/>
         <include name="slf4j-api-1.6.6.jar"/>
         <include name="slf4j-jdk14-1.6.6.jar"/>
      </fileset>
   </path>
   
   <target name="release" depends="library">
      <mkdir dir="${release.classes}"/>
      <javac srcdir="${source.root}" destdir="${release.classes}" includeantruntime="no" debug="off">
         <compilerarg value="-Xlint:all"/>
         <exclude name="**/*Test.java"/>
         <classpath>
            <path refid="release.include"/>
         </classpath>
      </javac>
   </target>


   <!-- TESTING
        Compiles the source code for testing and runs all tests
     -->
   <property name="test.root" location="test"/>
   <property name="testing.root" location="build/testing"/>
   <property name="testing.classes" location="${testing.root}/classes"/>
   <property name="testing.coverage" location="${testing.root}/coverage"/>
   <property name="testing.results" location="${testing.root}/results"/>
   <path id="testing.include">
      <fileset dir="${library.jars}">
        <include name="junit-4.10.jar"/>
        <include name="jmock-2.5.1.jar"/>
        <include name="hamcrest-core-1.1.jar"/>
        <include name="hamcrest-library-1.1.jar"/>
        <include name="jmock-legacy-2.5.1.jar"/>
        <include name="cglib-nodep-2.1_3.jar"/>
        <include name="objenesis-1.0.jar"/>
      </fileset>
   </path>

   <target name="testing" depends="library">
      <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
         <classpath path="${library.jars}/jacocoant.jar"/>
      </taskdef>
      <taskdef name="lint4j" classname="com.jutils.lint4j.ant.Lint4jAntTask">
         <classpath>
            <pathelement location="${library.jars}/lint4j.jar"/>
         </classpath>
      </taskdef>

      <mkdir dir="${testing.classes}"/>
      <javac  destdir="${testing.classes}" includeantruntime="false" debug="on">
         <compilerarg value="-Xlint:all"/>
         <src path="${source.root}"/>
         <src path="${test.root}"/>
         <classpath>
            <path refid="release.include"/>
            <path refid="testing.include"/>
         </classpath>
      </javac>
      <mkdir dir="${testing.results}"/>
      <mkdir dir="${testing.coverage}"/>
      <delete file="${testing.coverage}/jacoco.exec"/>
      <jacoco:coverage destfile="${testing.coverage}/jacoco.exec" append="true">
         <junit fork="true" printsummary="yes" haltonfailure="yes">
            <classpath>
               <pathelement location="${testing.classes}"/>
               <path refid="release.include"/>
               <path refid="testing.include"/>
            </classpath>
            <batchtest fork="false" todir="${testing.results}">
               <fileset dir="${source.root}">
                  <include name="**/*Test*.java"/>
               </fileset>
               <fileset dir="${test.root}">
                  <include name="**/*Test*.java"/>
               </fileset>
               <formatter type="plain"/>
            </batchtest>
         </junit>
      </jacoco:coverage>

      <lint4j packages="org.skullforge.*" level="5">
         <sourcepath>
            <pathelement location="${source.root}"/>
         </sourcepath>
         <classpath>
            <path refid="release.include"/>
            <path refid="testing.include"/>
         </classpath>
         <formatters>
            <formatter type="text"/>
            <formatter type="xml" toFile="${testing.results}/lint4j_report.xml"/>
         </formatters>
      </lint4j>

      <jacoco:report>
         <executiondata>
            <file file="${testing.coverage}/jacoco.exec"/>
         </executiondata>
         <structure name="Asteroid-Push">
            <classfiles>
               <fileset dir="${testing.classes}"/>
            </classfiles>
            <sourcefiles encoding="UTF-8">
               <fileset dir="${source.root}"/>
            </sourcefiles>
         </structure>
         <html destdir="${testing.coverage}"/>
      </jacoco:report>
   </target>

   <!-- DEPLOYMENT
        Creates the deployment jar
   -->
   <property name="deployment.root" value="build/deployment"/>
   <target name="deployment" depends="release">
      <mkdir dir="${deployment.root}"/>
      <taskdef name="one-jar" classname="com.simontuffs.onejar.ant.OneJarTask" classpath="${library.jars}/${lib.onejar-ant.archive}"/>
      <one-jar destfile="${deployment.root}/asteroid-push.jar">
         <manifest>
            <attribute name="Built-By" value="${user.name}"/>
            <attribute name="One-Jar-Main-Class" value="org.skullforge.asteroidpush.AsteroidPushMain"/>
            <attribute name="Main-Class" value="com.simontuffs.onejar.Boot"/>
         </manifest>
         <main>
            <fileset dir="${release.root}/classes"/>
            <fileset dir="res"/>
         </main>
         <lib>
            <fileset dir="${library.jars}">
               <include name="lwjgl.jar"/>
               <include name="slick.jar"/>
               <include name="jbox2d-library-2.1.2.2.jar"/>
               <include name="slf4j-api-1.6.6.jar"/>
               <include name="slf4j-jdk14-1.6.6.jar"/>
            </fileset>
         </lib>
         <binlib>
            <fileset dir="${library.natives}/windows">
               <include name="**.*"/>
            </fileset>
         </binlib>
      </one-jar>
   </target>

   <!-- PLAY -->
   <target name="play" depends="deployment">
      <java dir="${deployment.root}" jar="${deployment.root}/asteroid-push.jar" fork="true"/>
   </target>
   
   <!-- CLEAN -->
   <target name="clean">
      <delete dir="build"/>
   </target>
</project>