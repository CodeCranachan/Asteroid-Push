<project name="Asteroid Push" default="dist" basedir="." xmlns:jacoco="antlib:org.jacoco.ant">
   <description>
      Compiles the code, tests the functionality and builds the distribution package of Asteroid Push
   </description>

   <!-- LIBRARY
        Fetches libraries and other dependencies required by the final distribution and the build process itself
     -->
   <property name="lib.lwjgl.url" value="http://sourceforge.net/projects/java-game-lib/files/Official Releases/LWJGL 2.8.3/lwjgl-2.8.3.zip"/>
   <property name="lib.lwjgl.archive" value="lwjgl-2.8.3.zip"/>
   <property name="lib.slick.url" value="http://slick.cokeandcode.com/downloads/slick.zip"/>
   <property name="lib.slick.archive" value="slick.zip"/>
   <property name="lib.jbox2d.url" value="http://jbox2d.googlecode.com/files/jbox2d-2.1.2.2.zip"/>
   <property name="lib.jbox2d.archive" value="jbox2d-2.1.2.2.zip"/>
   <property name="lib.junit.url" value="http://cloud.github.com/downloads/KentBeck/junit/junit-4.10.jar"/>
   <property name="lib.junit.archive" value="junit-4.10.jar"/>
   <property name="lib.jmock.url" value="http://www.jmock.org/dist/jmock-2.5.1-jars.zip"/>
   <property name="lib.jmock.archive" value="jmock-2.5.1-jars.zip"/>
   <property name="lib.onejar-ant.url" value="http://downloads.sourceforge.net/project/one-jar/one-jar/one-jar-0.97/one-jar-ant-task-0.97.jar"/>
   <property name="lib.onejar-ant.archive" value="one-jar-ant-task-0.97.jar"/>
   <property name="lib.jacoco.url" value="http://sourceforge.net/projects/eclemma/files/07_JaCoCo/trunk/jacoco-0.5.8.201205221855.zip"/>
   <property name="lib.jacoco.archive" value="jacoco-0.5.8.201205221855.zip"/>

   <property name="library.root" location="build/library"/>
   <property name="library.downloads" location="${library.root}/download"/>
   <property name="library.jars" location="${library.root}/jar"/>
   <property name="library.natives" location="${library.root}/native"/>

   <target name="library">
      <!-- Download library packages -->
      <mkdir dir="${library.downloads}"/>
      <get dest="${library.downloads}" verbose="on" skipexisting="true">
         <url url="${lib.lwjgl.url}"/>
         <url url="${lib.slick.url}"/>
         <url url="${lib.jbox2d.url}"/>
         <url url="${lib.junit.url}"/>
         <url url="${lib.jmock.url}"/>
         <url url="${lib.jacoco.url}"/>
         <url url="${lib.onejar-ant.url}"/>
      </get>
      
      <mkdir dir="${library.jars}"/>
      <mkdir dir="${library.natives}"/>
      <!-- Slick -->
      <unzip src="${library.downloads}/${lib.slick.archive}" dest="${library.jars}">
         <patternset>
            <include name="lib/slick.jar"/>
         </patternset>
         <mapper type="flatten"/>
      </unzip>
      <!-- Lwjgl -->
      <unzip src="${library.downloads}/${lib.lwjgl.archive}" dest="${library.jars}">
         <patternset>
            <include name="**/jar/lwjgl.jar"/>
            <include name="**/jar/jinput.jar"/>
         </patternset>
         <mapper type="flatten"/>
      </unzip>
      <unzip src="${library.downloads}/${lib.lwjgl.archive}" dest="${library.natives}">
         <patternset>
            <include name="**/native/**"/>
         </patternset>
         <mapper type="regexp" from="^*./native/(.*)$$" to="\1"/>
      </unzip>
      <!-- JBox2d -->
      <unzip src="${library.downloads}/${lib.jbox2d.archive}" dest="${library.jars}">
         <patternset>
            <include name="**/jbox2d-library-?.?.?.?.jar"/>
         </patternset>
         <mapper type="flatten"/>
      </unzip>
      <!-- JUnit -->
      <copy file="${library.downloads}/${lib.junit.archive}" todir="${library.jars}"/>
      <!-- JMock -->
      <unzip src="${library.downloads}/${lib.jmock.archive}" dest="${library.jars}">
         <patternset>
            <include name="**/*.jar"/>
         </patternset>
         <mapper type="flatten"/>
      </unzip>
      <!-- OneJar -->
      <copy file="${library.downloads}/${lib.onejar-ant.archive}" todir="${library.jars}"/>
      <!-- Jacoco -->
      <unzip src="${library.downloads}/${lib.jacoco.archive}" dest="${library.jars}">
         <patternset>
            <include name="**/*.jar"/>
         </patternset>
         <mapper type="flatten"/>
      </unzip>
   </target>

   <!-- RELEASE 
        Compiles the source code for distribution 
     -->
   <property name="source.root" location="src"/>
   <property name="release.root" location="build/release"/>
   <property name="release.classes" location="${release.root}/classes"/>
   <path id="release.include">
      <fileset dir="${library.jars}">
         <include name="lwjgl.jar"/>
         <include name="slick.jar"/>
         <include name="jbox2d-library-2.1.2.2.jar"/>
      </fileset>
   </path>
   
   <target name="release" depends="library">
      <mkdir dir="${release.classes}"/>
      <javac srcdir="${source.root}" destdir="${release.classes}" includeantruntime="no" debug="off">
         <exclude name="**/*Test.java"/>
         <classpath>
            <path refid="release.include"/>
         </classpath>
      </javac>
   </target>
   
   <!-- TESTING
        Compiles the source code for testing and runs all tests
     -->
   <property name="testing.root" location="build/testing"/>
   <property name="testing.classes" location="${testing.root}/classes"/>
   <property name="testing.coverage" location="${testing.root}/coverage"/>
   <property name="testing.results" location="${testing.root}/results"/>
   <path id="testing.include">
      <fileset dir="${library.jars}">
        <include name="junit-4.10.jar"/>
        <include name="jmock-2.5.1.jar"/>
        <include name="hamcrest-core-1.1.jar"/>
        <include name="hamcrest-library-1.1.jar"/>
        <include name="jmock-legacy-2.5.1.jar"/>
        <include name="cglib-nodep-2.1_3.jar"/>
        <include name="objenesis-1.0.jar"/>
      </fileset>
   </path>

   <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
      <classpath path="${library.jars}/jacocoant.jar"/>
   </taskdef>

   <target name="testing" depends="library">
      <mkdir dir="${testing.classes}"/>
      <javac srcdir="${source.root}" destdir="${testing.classes}" includeantruntime="false" debug="on">
         <classpath>
            <path refid="release.include"/>
            <path refid="testing.include"/>
         </classpath>
      </javac>
      <mkdir dir="${testing.results}"/>
      <mkdir dir="${testing.coverage}"/>
      <delete file="${testing.coverage}/jacoco.exec"/>
      <jacoco:coverage destfile="${testing.coverage}/jacoco.exec" append="true">
         <junit fork="true" printsummary="yes" haltonfailure="yes">
            <classpath>
               <pathelement location="${testing.classes}"/>
               <path refid="release.include"/>
               <path refid="testing.include"/>
            </classpath>
            <batchtest fork="yes" todir="${testing.results}">
               <fileset dir="${source.root}">
                  <include name="**/*Test*.java"/>
               </fileset>
               <formatter type="plain"/>
            </batchtest>
         </junit>
      </jacoco:coverage>

      <jacoco:report>
         <executiondata>
            <file file="${testing.coverage}/jacoco.exec"/>
         </executiondata>
         <structure name="Asteroid-Push">
            <classfiles>
               <fileset dir="${testing.classes}"/>
            </classfiles>
            <sourcefiles encoding="UTF-8">
               <fileset dir="${source.root}"/>
            </sourcefiles>
         </structure>
         <html destdir="${testing.coverage}"/>
      </jacoco:report>
   </target>


  <property name="path.downloads" location="build/downloads"/>
  <property name="path.classes" location="build/classes"/>
  <property name="path.debug-classes" location="build/debug-classes"/>
  <property name="path.coverage-classes" location="build/instrumented-classes"/>


  <!-- Library files -->
  <path id="libraries.runtime">
    <fileset dir="lib/runtime">
      <include name="lwjgl.jar"/>
      <include name="slick.jar"/>
      <include name="jbox2d-library-2.1.2.2.jar"/>
    </fileset>
  </path>
  <path id="libraries.test">
    <fileset dir="lib/testing">
        <include name="junit-4.10.jar"/>
        <include name="jmock-2.5.1.jar"/>
        <include name="hamcrest-core-1.1.jar"/>
        <include name="hamcrest-library-1.1.jar"/>
        <include name="jmock-legacy-2.5.1.jar"/>
        <include name="cglib-nodep-2.1_3.jar"/>
        <include name="objenesis-1.0.jar"/>
    </fileset>
  </path>

  <!-- Custom tasks -->
  <taskdef name="lint4j" classname="com.jutils.lint4j.ant.Lint4jAntTask">
    <classpath>
      <pathelement location="lib/testing/lint4j.jar"/>
    </classpath>
  </taskdef>

  <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${path.downloads}"/>
    <mkdir dir="${path.classes}"/>
    <mkdir dir="${path.debug-classes}"/>
    <!-- Download dependencies -->
    <get dest="${path.downloads}" verbose="on" skipexisting="true">
      <url url="http://sourceforge.net/projects/java-game-lib/files/Official Releases/LWJGL 2.8.3/lwjgl-2.8.3.zip"/>
      <url url="http://slick.cokeandcode.com/downloads/slick.zip"/>
      <url url="http://www.jmock.org/dist/jmock-2.5.1-jars.zip"/>
      <url url="http://cloud.github.com/downloads/KentBeck/junit/junit-4.10.jar"/>
      <url url="http://jbox2d.googlecode.com/files/jbox2d-2.1.2.2.zip"/>
      <url url="http://sourceforge.net/projects/eclemma/files/07_JaCoCo/trunk/jacoco-0.5.8.201205221855.zip"/>
	  <url url="http://downloads.sourceforge.net/project/one-jar/one-jar/one-jar-0.97/one-jar-ant-task-0.97.jar"/>
    </get>
  </target>

  <target name="compile" depends="init" description="compile the source">
    <!-- Compile the java code from src into build -->
    <javac srcdir="src" destdir="${path.classes}" includeantruntime="false" debug="off">
      <classpath>
        <path refid="libraries.runtime"/>
        <path refid="libraries.test"/>
      </classpath>
    </javac>
    <javac srcdir="src" destdir="${path.debug-classes}" includeantruntime="false" debug="on">
      <classpath>
        <path refid="libraries.runtime"/>
        <path refid="libraries.test"/>
      </classpath>
    </javac>
  </target>

  <target name="metrics" depends="compile" description="generating code metrics">
    <lint4j packages="org.skullforge.*" level="5">
      <sourcepath>
        <pathelement location="src"/>
      </sourcepath>
      <classpath>
        <path refid="libraries.runtime"/>
        <path refid="libraries.test"/>
      </classpath>
      <formatters>
        <formatter type="text"/>
        <formatter type="xml" toFile="build/lint4j_report.xml"/>
      </formatters>
    </lint4j>
  </target>

  <target name="test" depends="compile" description="Run test suite">
    <delete file="build/jacoco.exec"/>
    <jacoco:coverage destfile="build/jacoco.exec" append="true">
      <junit fork="true" printsummary="yes" haltonfailure="yes">
        <classpath>
          <pathelement location="${path.debug-classes}"/>
          <path refid="libraries.test"/>
          <path refid="libraries.runtime"/>
        </classpath>

        <batchtest fork="yes" todir="build">
          <fileset dir="src">
             <include name="**/*Test*.java"/>
          </fileset>
          <formatter type="plain"/>
        </batchtest>
      </junit>
    </jacoco:coverage>

    <jacoco:report>
        <executiondata>
            <file file="build/jacoco.exec"/>
        </executiondata>
        <structure name="OmegaZone">
            <classfiles>
                <fileset dir="${path.debug-classes}"/>
            </classfiles>
            <sourcefiles encoding="UTF-8">
                <fileset dir="src"/>
            </sourcefiles>
        </structure>
        <html destdir="build/coverage"/>
    </jacoco:report>
  </target>

  <target name="dist" depends="test,metrics,compile" description="generate the distribution" >
    <!-- Create the manifest file -->
    <mkdir dir="build/"/>
    <manifest file="build/MANIFEST.MF">
      <attribute name="Built-By" value="${user.name}"/>
      <attribute name="Main-Class" value="org.skullforge.omegazone.OmegaZoneMain"/>
    </manifest>
    
    <!-- Clean out directory to create jar file from -->
    <delete dir="build/jar"/>
    <mkdir dir="build/jar"/>
    <!-- Copy classes -->
    <copy todir="build/jar">
      <fileset dir="${path.classes}" includes="**/*.class" excludes="**/*Test*.class"/>
    </copy>
    <unjar src="lib/runtime/slick.jar" dest="build/jar">
      <patternset>
        <include name="org/**"/>
      </patternset>
    </unjar>
    <unjar src="lib/runtime/lwjgl.jar" dest="build/jar">
      <patternset>
        <include name="org/**"/>
      </patternset>
    </unjar>
    <unjar src="lib/runtime/jbox2d-library-2.1.2.2.jar" dest="build/jar">
      <patternset>
        <include name="org/**"/>
      </patternset>
    </unjar>

    <!-- Create the deployment directory -->
    <mkdir dir="deploy"/>
    <!-- Put everything in $build/jar into the deployment jar file -->
    <jar jarfile="deploy/OmegaZone-${DSTAMP}.jar" basedir="build/jar" manifest="build/MANIFEST.MF"/>
    <!-- Extract native slick files -->
    <unjar src="lib/runtime/natives-${os.family}.jar" dest="deploy"/>
  </target>

  <target name="run" depends="dist" description="run the game">
    <java jar="deploy/OmegaZone-${DSTAMP}.jar" fork="true">
      <jvmarg value="-Djava.library.path=deploy"/>
    </java>
  </target>

  <target name="clean" description="clean up" >
    <!-- Delete the build and dist directory trees -->
    <delete dir="build"/>
    <delete dir="dist"/>
  </target>
</project>