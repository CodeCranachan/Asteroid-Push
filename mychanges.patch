diff --git a/src/org/skullforge/asteroidpush/GameStateFactory.java b/src/org/skullforge/asteroidpush/GameStateFactory.java
index 03630c7..5bb3373 100644
--- a/src/org/skullforge/asteroidpush/GameStateFactory.java
+++ b/src/org/skullforge/asteroidpush/GameStateFactory.java
@@ -42,9 +42,10 @@ public class GameStateFactory {
    }
 
    private MatchGameState createMatchGameState(ResourceLoader resourceLoader) {
+      Simulator simulator = new Simulator();
       Layout ui = new SimpleLayout();
       UiFactory uifactory = new IngameUiFactory(resourceLoader);
       uifactory.createUi(ui);
-      return new MatchGameState(new Simulator(), ui);
+      return new MatchGameState(simulator, ui);
    }
 }
diff --git a/src/org/skullforge/asteroidpush/ui/IngameUiFactory.java b/src/org/skullforge/asteroidpush/ui/IngameUiFactory.java
index 534a0cc..7f2cccd 100644
--- a/src/org/skullforge/asteroidpush/ui/IngameUiFactory.java
+++ b/src/org/skullforge/asteroidpush/ui/IngameUiFactory.java
@@ -2,6 +2,7 @@ package org.skullforge.asteroidpush.ui;
 
 import org.newdawn.slick.Font;
 import org.skullforge.asteroidpush.ResourceLoader;
+import org.skullforge.asteroidpush.ui.TrackingCamera;
 import org.skullforge.asteroidpush.ui.layouts.Layout;
 
 public class IngameUiFactory implements UiFactory {
@@ -15,6 +16,9 @@ public class IngameUiFactory implements UiFactory {
       Font font = loader.loadFont("Alfphabet-IV.ttf", 14);
       Widget playerLabel = new Label("PlayerName", font);
       layout.setWidget("info", playerLabel);
+      
+      Widget playerCamera = new TrackingCamera(font);
+      layout.setWidget("playerCamera", playerCamera);
    }
 
    private ResourceLoader loader;
diff --git a/src/org/skullforge/asteroidpush/ui/TrackingCamera.java b/src/org/skullforge/asteroidpush/ui/TrackingCamera.java
new file mode 100644
index 0000000..45d09a3
--- /dev/null
+++ b/src/org/skullforge/asteroidpush/ui/TrackingCamera.java
@@ -0,0 +1,32 @@
+package org.skullforge.asteroidpush.ui;
+
+import org.newdawn.slick.Color;
+import org.newdawn.slick.Font;
+import org.newdawn.slick.Graphics;
+import org.newdawn.slick.geom.Rectangle;
+import org.skullforge.asteroidpush.appearances.Appearance;
+
+public class TrackingCamera implements Widget, Renderer {
+   
+   public TrackingCamera(Font font) {
+      this.font = font;
+   }
+
+   @Override
+   public void render(Graphics g, Rectangle frame) {
+      g.setColor(Color.darkGray);
+      g.fillRect(frame.getX(), frame.getY(), frame.getWidth(), frame.getHeight());
+      Font currentFont = g.getFont();
+      g.setFont(font);
+      g.setColor(Color.red);
+      g.drawString("YAddaadad!!!!", frame.getX(), frame.getY());
+      g.setFont(currentFont);
+   }
+
+   @Override
+   public void draw(Appearance appearance) {
+      // TODO Auto-generated method stub      
+   }
+
+   private Font font;
+}
diff --git a/src/org/skullforge/asteroidpush/ui/layouts/SimpleLayout.java b/src/org/skullforge/asteroidpush/ui/layouts/SimpleLayout.java
index 9a7c2b2..b2bcc8e 100644
--- a/src/org/skullforge/asteroidpush/ui/layouts/SimpleLayout.java
+++ b/src/org/skullforge/asteroidpush/ui/layouts/SimpleLayout.java
@@ -14,12 +14,17 @@ public class SimpleLayout implements Layout {
    public SimpleLayout() {
       elements = new HashMap<String, SimpleLayout.LayoutElement>(2);
 
-      LayoutElement backgroundElement = new LayoutElement(null);
+      Rectangle emptyRectangle = new Rectangle(0, 0, 1, 1);
+      LayoutElement backgroundElement = new LayoutElement(emptyRectangle);
       elements.put("background", backgroundElement);
 
       Rectangle infoRectangle = new Rectangle(400, 20, 220, 60);
       LayoutElement infoElement = new LayoutElement(infoRectangle);
       elements.put("info", infoElement);
+      
+      Rectangle cameraRectangle = new Rectangle(0, 0, 400, 300);
+      LayoutElement cameraElement = new LayoutElement(cameraRectangle);
+      elements.put("playerCamera", cameraElement);
    }
 
    @Override
diff --git a/test/org/skullforge/asteroidpush/ui/layouts/SimpleLayoutTest.java b/test/org/skullforge/asteroidpush/ui/layouts/SimpleLayoutTest.java
index 0e0dc58..845602e 100644
--- a/test/org/skullforge/asteroidpush/ui/layouts/SimpleLayoutTest.java
+++ b/test/org/skullforge/asteroidpush/ui/layouts/SimpleLayoutTest.java
@@ -18,6 +18,7 @@ public class SimpleLayoutTest {
    GameContainer containerMock;
    Widget backgroundWidgetMock;
    Widget infoWidgetMock;
+   Widget playerViewWidgetMock;
    SimpleLayout testLayout;
 
    @Before
@@ -27,6 +28,7 @@ public class SimpleLayoutTest {
       containerMock = context.mock(GameContainer.class);
       backgroundWidgetMock = context.mock(Widget.class, "background");
       infoWidgetMock = context.mock(Widget.class, "info");
+      playerViewWidgetMock = context.mock(Widget.class, "playerView");
       testLayout = new SimpleLayout();
    }
 
@@ -61,7 +63,7 @@ public class SimpleLayoutTest {
 
    @Test
    public void testDrawWidgets() {
-      final Sequence drawOrder = context.sequence("drawOrder");
+      //final Sequence drawOrder = context.sequence("drawOrder");
       final Rectangle fullScreen = new Rectangle(0.0f, 0.0f, 640.0f, 480.0f);
       context.checking(new Expectations() {
          {
@@ -71,15 +73,19 @@ public class SimpleLayoutTest {
             will(returnValue((int) fullScreen.getHeight()));
             oneOf(backgroundWidgetMock).render(with(same(graphicsMock)),
                                                with(any(Rectangle.class)));
-            inSequence(drawOrder);
+            //inSequence(drawOrder);
             oneOf(infoWidgetMock).render(with(same(graphicsMock)),
                                          with(any(Rectangle.class)));
-            inSequence(drawOrder);
+            //inSequence(drawOrder);
+            oneOf(playerViewWidgetMock).render(with(same(graphicsMock)),
+                                         with(any(Rectangle.class)));
+            //inSequence(drawOrder);
          }
       });
       testLayout.setWidget("invalid element name", infoWidgetMock);
       testLayout.setWidget("info", infoWidgetMock);
       testLayout.setWidget("background", backgroundWidgetMock);
+      testLayout.setWidget("playerCamera", playerViewWidgetMock);
       testLayout.render(containerMock, graphicsMock);
       context.assertIsSatisfied();
    }
